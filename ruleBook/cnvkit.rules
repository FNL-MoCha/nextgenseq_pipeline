subCNV={}
for subject in config['DNASeq']:
	for sample in config['DNASeq'][subject]:
		if config["sample_type"][sample] =='Tumor':
			if config['sample_captures'][sample] in config['cnvkit_ref']:
				TARGET +=[subject+"/"+TIME+"/"+sample+"/cnvkit/"+sample+".cns"]
				TARGET +=[subject+"/"+TIME+"/"+sample+"/cnvkit/"+sample+".seg"]
				TARGET +=[subject+"/"+TIME+"/"+subject+".cnvkit.seg"]
				if subject not in subCNV:
					subCNV[subject]  =[subject+"/"+TIME+"/"+sample+"/cnvkit/"+sample+".seg"]
				else:
					subCNV[subject] +=[subject+"/"+TIME+"/"+sample+"/cnvkit/"+sample+".seg"]
############
#       cnvkit
############
rule cnvkit_pon:
	input:
		bam="{base}/{TIME}/{sample}/{sample}.bwa.final.bam",
		interval= lambda wildcards: config['cnvkit_ref'][config['sample_captures'][wildcards.sample]],
	output:
		"{base}/{TIME}/{sample}/cnvkit/{sample}.cns",
		"{base}/{TIME}/{sample}/cnvkit/{sample}.seg"
	version: config["cnvkit"]
	params:
		rulename  = "cnvkit_pon",
		batch     = config[config['host']]["job_gatk"],
	shell: """
	#######################
	module load cnvkit/{version}
	cnvkit.py batch -p ${{THREADS}} {input.bam} --reference {input.interval} --output-dir {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/cnvkit/
	mv {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/cnvkit/{wildcards.sample}.bwa.final.cns {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/cnvkit/{wildcards.sample}.cns
	mv {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/cnvkit/{wildcards.sample}.bwa.final.cnr {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/cnvkit/{wildcards.sample}.cnr
	echo -e "ID\\tchrom\\tloc.start\\tloc.end\\tnum.mark\\tseg.mean" >{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/cnvkit/{wildcards.sample}.seg
	awk -v sam="{wildcards.sample}" '{{OFS="\\t"}}{{print sam,$1,$2,$3,$7,$5}}'  {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/cnvkit/{wildcards.sample}.cns |grep -v chromosome>>{wildcards.base}/{wildcards.TIME}/{wildcards.sample}/cnvkit/{wildcards.sample}.seg
	cnvkit.py scatter -s {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/cnvkit/{wildcards.sample}.cn{{s,r}} -o {wildcards.base}/{wildcards.TIME}/{wildcards.sample}/cnvkit/{wildcards.sample}.pdf
	#######################
	"""
############
#	make igv input from cnvkit 
############
rule cnvkit2seg:
	input:
		lambda wildcards: subCNV[wildcards.subject]
	output:
		"{subject}/{TIME}/{subject}.cnvkit.seg"
	params:
		rulename  = "cnvkit2seg",
		batch     = config[config['host']]["job_default"],
	shell: """
	#######################
	echo -e "ID\\tchrom\\tloc.start\\tloc.end\\tnum.mark\\tseg.mean" >{output}
	cat {input} |grep -v ^ID|sed -e 's/\~WES//g' >>{output}
	#######################
	"""
